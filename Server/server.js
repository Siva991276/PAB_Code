const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const middleware = require("./Middlware");
const userData = require("./Model/userData");
 

const app = express();
const port = 4005;

const mogoURL =
  "mongodb+srv://badasiva22:Siva991276@cluster0.iis7lrd.mongodb.net/ProfileNames?retryWrites=true&w=majority";

app.use(express.json());
app.use(cors({ origin: "*" }));

//initalizing mongodb to node
mongoose
  .connect(mogoURL)
  .then(() => console.log("DB Connected"))
  .catch((e) => console.log(e.message));

app.get("/", (req, res) => {
  res.send("Welcome to developer hubs server");
});

// Register API
app.post("/register", async (req, res) => {
  try {
    const { fullname, State, Currentlocation, mobile, email } =
      req.body;
    //checking user whether it is exits or not
    const isUserExist = await userData.findOne({ email: email });

    if (isUserExist) {
      return res.send("User Already Registered");
    }
     else {
        //generating encrypted password for user
      let newUser = new userData({
        fullname,
        State,
        Currentlocation,
        mobile,
        email,
         
      });

      newUser.save(); //saving mongodb collections
      return res.send("user Created Successfully");
    }
  } catch (e) {
    console.log(e.message);
    res.send("Inernal server error");
  }
});

//login API

// app.post("/login", async (req, res) => {
//   const { email, password } = req.body;
//   const isUserExist = await userData.findOne({ email });

//   if (isUserExist) {
//     const isPasswordMatched = await bcrypt.compare(
//       password,
//       isUserExist.password
//     ); //compare two password
//     if (isPasswordMatched) {
//       let payload = {
//         user: isUserExist.id,
//       };
//       jwt.sign(
//         payload,
//         "jwtpassword",
//         { expiresIn: 360000000 },
//         (err, token) => {
//           if (err) throw err;
//           return res.json({ token }); // this token generated by jwt
//         }
//       );
//     } else {
//       return res.send("password not matched");
//     }
//   } else {
//     res.send("User Not Found");
//   }
// });
//siva

//get all developers data
// app.get("/alldevelopers", middleware, async (req, res) => {
//   const alldevelopers = await userData.find({});

//   return res.json(alldevelopers);
// });

// get individual profile
// app.get("/individualprofile/:id", middleware, async (req, res) => {
//   const { id } = req.params;
//   const individualuser = await userData.findById({ _id: id });
//   if (!individualuser) {
//     return res.send("User not Found!!!");
//   }
//   return res.send(individualuser);
// });

//add review

// app.post('/addreview', middleware, async(req,res)=>{
//   try{
//       const {taskworker,rating}=req.body;
//       console.log(req.user)
//       const existUser = await userData.findById(req.user);
//       console.log(existUser);
//       const newReview=new review({
//           taskprovider:existUser.fullname,
//           taskworker,
//           rating 
//       })
//       console.log(newReview);
//       newReview.save();
//       return res.send("review updated successfully")
//   }catch(err){
//       console.log(err)
//       res.status(500).send("server error")
//   }
// })


app.listen(port, () => {
  console.log(`Server running at ${port}`);
});
